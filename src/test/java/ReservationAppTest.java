/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.xyz.reservations.config.Settings;
import com.xyz.reservations.domain.SeatHold;
import com.xyz.reservations.engine.ReservationApp;
import com.xyz.reservations.engine.TicketServiceImpl;
import com.xyz.reservations.service.TicketService;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

public class ReservationAppTest {

    TicketService service = TicketServiceImpl.getInstance(
            Settings.seatCount, Settings.rowCount, Settings.holdTimeout);

    @Test
    public void test1() {
        System.out.println("========Testing hold");
        SeatHold sh = service.findAndHoldSeats(4, "aaa@s.com");
        int numHeld = sh.seatArray.length;

        assertNotEquals(sh.seatHoldId.intValue(), -1);
        assertEquals(numHeld, 4);
        assertEquals(Settings.seatCount - numHeld, service.numSeatsAvailable());
    }

    @Test
    public void test2(){
        System.out.println("========Testing auto release of hold");
        try {
            Thread.sleep((Settings.holdTimeout + 5 )*1000);
        }catch(Exception ex){ }

        assertEquals(Settings.seatCount, service.numSeatsAvailable());
        String confId = service.reserveSeats(1, "aaa@s.com");
        assertEquals(confId, "");
    }

    @Test
    public void test3() {
        System.out.println("========Testing reserve");
        SeatHold sh = service.findAndHoldSeats(4, "aaa@s.com");
        int numHeld = sh.seatArray.length;
        assertEquals(numHeld, 4);
        assertEquals(sh.seatArray[0].column, 1);

        String confId = service.reserveSeats(sh.seatHoldId, "aaa@s.com");
        assertNotEquals(confId, "");
        assertEquals(Settings.seatCount - numHeld, service.numSeatsAvailable());

        try {
            Thread.sleep((Settings.holdTimeout + 5) * 1000);
        } catch (Exception ex) {
        }
        //make sure seats are not released
        assertEquals(Settings.seatCount - numHeld, service.numSeatsAvailable());
    }

    @Test
    public void test4() {
        System.out.println("========Testing failed hold");
        SeatHold sh = null;
        try {
            sh = service.findAndHoldSeats(Settings.seatCount + 4, "aaa@s.com");
        }catch(Exception ex){
            assertEquals(ex.getClass(), IllegalArgumentException.class);
        }
    }

    @Test
    public void test5() {
        System.out.println("========Testing failed reserve");
        String confId = service.reserveSeats(1, "aaa@s.com");
        assertEquals(confId, "");
    }

    @Test
    public void test6() {
        System.out.println("========Testing multi row hold");
        SeatHold sh = service.findAndHoldSeats(11, "aaa@s.com");
        int numHeld = sh.seatArray.length;

        assertNotEquals(sh.seatHoldId.intValue(), -1);
        assertEquals(numHeld, 11);
        assertNotEquals(sh.seatArray[0].row, sh.seatArray[sh.seatArray.length - 1].row);
    }

}
